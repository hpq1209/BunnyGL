/**
\page stdinterfaces Standard Interfaces
\defgroup stdinterfaces Standard Interfaces
\brief Provides information about the standard interfaces in GCF

Standard interfaces are those that are available to all GCF 
applications. They are a part of GCF and they mean something 
within GCF.

For example the IContainer interface has to be implemented
by any QObject subclass that implements one or more interfaces.
This way it is possible to reach other interfaces from a given
interface.
*/

/**
\ingroup stdinterfaces
\interface IContainer IContainer
\brief This interface provides access to the QObject that contains
one or more interfaces.

To understand the importance and need for IContainer interface, 
take a look at the class definition below.

\code
class Interface1 
{
public:
    virtual void interface1Method() = 0;
};
Q_DECLARE_INTERFACE(Interface1, "com.vcreatelogic.Interface1/1.0");

class Interface2
{
public:
    virtual void interface2Method() = 0;
};
Q_DECLARE_INTERFACE(Interface2, "com.vcreatelogic.Interface2/1.0");

class MyClass : public QObject, public Interface1, public Interface2
{
    Q_OBJECT
    Q_INTERFACES(Interface1 Interface2);

public:
    MyClass();
    ~MyClass();

    void interface1Method();
    void interface2Method();
};
\endcode

Instances of MyClass can be type-cast into Interface1 and Interface2
by making use of the qobject_cast casting operator. Take a look at the
code snippet below

\code
MyClass* obj = new MyClass;
Interface1* iface1 = qobject_cast<Interface1*>(obj);
Interface2* iface2 = qobject_cast<Interface2*>(obj);
\endcode

Suppose you have a method that accepts Interface1 as parameter, and
you want to find out if the object also has a Interface2 implementation;
how do you do that?

\code
void someFunction(Interface1* ifacePtr)
{
    Interface2* ifacePtr2 = qobject_cast<Interface1*>(ifacePtr);
    // WRONG, WRONG, WRONG
}
\endcode

There are some things wrong about the above casting mechanism

\li It is not possible to use qobject_cast casting operator on 
pointers that don't point to QObject.
\li It is not save to use dynamic_cast or reinterpret_cast on 
interfaces, to reach its parent.

To solve these problems, we can make use of the IContainer interface.
The IContainer interface, neccesiates implementations to provide
a containerObject() method. This method should return a pointer to 
the object that contains one or more interfaces.

If you require a class that implements your interface to be a QObject
then virtually inherit your interface from IContainer.

Let's revise our class definition as follows

\code
class Interface1 : virtual public IContainer
{
public:
    virtual void interface1Method() = 0;
};
Q_DECLARE_INTERFACE(Interface1, "com.vcreatelogic.Interface1/1.0");

class Interface2 : virtual public IContainer
{
public:
    virtual void interface2Method() = 0;
};
Q_DECLARE_INTERFACE(Interface2, "com.vcreatelogic.Interface2/1.0");

class MyClass : public QObject, public Interface1, public Interface2
{
    Q_OBJECT
    Q_INTERFACES(Interface1 Interface2);

public:
    MyClass();
    ~MyClass();

    QObject* containerObject() { return this; }
    void interface1Method();
    void interface2Method();
};
\endcode

With the above change we can now have casting done like this

\code
void someFunction(Interface1* ifacePtr)
{
    QObject* obj = ifacePtr->containerObject();
    Interface2* ifacePtr2 = qobject_cast<Interface2*>(obj);
}
\endcode

If you want to delete an object that contains a container interface,
you cannot use the delete operator on the interface pointer.
You will need to use delete on the container object.

Example:
\code
void someFunction(Interface1* ifacePtr)
{
    delete ifacePtr->containerObject();
}
\endcode

\note If an interface inherits from IContainer, it means that 
classes that implement the interface must implement IContainer.
This also means that classes that implement the interface have
to be inherited from QObject.
*/

/**
\fn virtual QObject* IContainer::containerObject() = 0

Throught this interface method you can obtain a pointer to the QObject
that contains this interface (and possibly others).
*/

/**
\ingroup stdinterfaces
\interface IQueryable IQueryable
\brief An interface that helps in reaching other interfaces from 
a given interface.

Sometimes in may happen that you have a class that implements 
one or more interfaces, but is not a QObject. For example 

\code
class Interface1 
{
public:
    virtual void interface1Method() = 0;
};

class Interface2
{
public:
    virtual void interface2Method() = 0;
};

class MyClass : public Interface1, public Interface2
{
public:
    MyClass();
    ~MyClass();

    void interface1Method();
    void interface2Method();
};
\endcode

Instances of MyClass can be type-cast into Interface1 and Interface2
by making use of the qobject_cast casting operator. Take a look at the
code snippet below

\code
MyClass* obj = new MyClass;
Interface1* iface1 = dynamic_cast<Interface1*>(obj);
Interface2* iface2 = dynamic_cast<Interface2*>(obj);
\endcode

Suppose you have a method that accepts Interface1 as parameter, and
you want to find out if the object also has a Interface2 implementation;
how do you do that?

\code
void someFunction(Interface1* ifacePtr)
{
    Interface2* ifacePtr2 = dynamic_cast<Interface1*>(ifacePtr);
    // WRONG, WRONG, WRONG
}
\endcode

To solve this problems, we can make use of the IQueryable interface.
While designing your applications, if you require a class, that 
implements your interface, not necessarily inherit from QObject; then 
virtually inherit your interface from IQueryable.

The IQueryable interface, requires classes to implement two methods

\code
virtual bool queryInterface(QString ifaceName, void** ifacePtr) = 0;
virtual bool destroySelf() = 0;
\endcode

These methods help in typecasting from one interface to another
by making use of the interface name. Implementation of queryInterface()
can be tricky sometimes. To help make the implementation easy, GCF
provides macros

\li GCF_DECLARE_QUERYABLE
\li GCF_BEGIN_QUERY_TABLE
\li GCF_IMPLEMENTS and
\li GCF_END_QUERY_TABLE

The use of above macros and IQueryable can be observed in the revised
class and interface definition below.

\code
class Interface1 : virtual public IQueryable
{
public:
    virtual void interface1Method() = 0;
};

class Interface2 : virtual public IContainer
{
public:
    virtual void interface2Method() = 0;
};

class MyClass : public Interface1, public Interface2
{
    GCF_DECLARE_QUERYABLE

public:
    MyClass();
    ~MyClass();

    void interface1Method();
    void interface2Method();
};

// In the implementation
GCF_BEGIN_QUERY_TABLE(MyClass)
    GCF_IMPLEMENTS(Interface1)
    GCF_IMPLEMENTS(Interface2)
GCF_END_QUERY_TABLE(MyClass)

\endcode

With the above change we can now have casting done like this

\code
void someFunction(Interface1* ifacePtr)
{
    Interface2* ifacePtr2 = 0;
    bool success = ifacePtr->queryInterface("Interface2", (void**)&ifacePtr2);
    if( success && ifacePtr2 )
    {
        // now we have ifacePtr2
    }
}
\endcode

If you want to delete an object that contains a queryable interface,
you cannot make use of the delete operator on ther interface pointer.
You will need to make use of the destroySelf() method from IQueryable.

Example:
\code
void someFunction(Interface1* ifacePtr)
{
    ifacePtr->destroySelf(); // now the object containing
                             // the interface is deleted
}
\endcode

\note If an interface inherits from IQueryable, it means that
any class that inherits it must contain the GCF_DECLARE_QUERYABLE
macro. In the implementation GCF_BEGIN_QUERY_TABLE/GCF_IMPLEMENTS/GCF_END_QUERY_TABLE
macros have to be used to describe all the interfaces implemented
by that class.

*/

/**
\fn virtual bool IQueryable::queryInterface(QString ifaceName, void** ifacePtr) = 0

Through this interface method you can find out if the object has other
interfaces or not.

\param ifaceName Name of the interface you want to query
\param ifacePtr Pointer to a pointer in which the other interface will
be stored.

The function returns true if the query/typcast was successful. False
otherwise.
*/

/**
\fn virtual bool IQueryable::destroySelf() = 0

Through this interface method you can delete the object that 
contains the interface.
*/


/**
\ingroup stdinterfaces
\interface IAboutData IAboutData
\brief Through this interface GCF queries about data of different components

GCF provides a standard about dialog box (\ref CStdAboutBox) that you can use in your 
applications. 

\image html about.png

This dialog box shows on a per-component basis some about information. The about data
shown in this dialog box is fetched from IAboutData interface implementations found
in the entire application. When the dialog box is launched; it queries for a list of
IAboutData implementations in the application and shows the data accordingly.

To show about information for your components, just implement the IAboutData interface
in an object that is exposed via the GUI XML file.
*/

/**
\ingroup stdinterfaces
\struct GCF::AboutPerson IAboutData.h
\brief Describes some information about a person
*/

/**
\var QString GCF::AboutPerson::Name

Name of the person.
*/

/**
\var QString GCF::AboutPerson::EMail

EMail-ID if person.
*/

/**
\var QString GCF::AboutPerson::URL

URL from which more information about the person can be found. 
*/

/**
\var QString GCF::AboutPerson::Task

Describes the persons role in the product.
*/

/**
\fn virtual QString IAboutData::productName() const = 0

Returns the name of the product, whose about is being described by this interface.
*/

/**
\fn virtual QString IAboutData::organization() const = 0

Returns the name of the organization that released the product.
*/

/**
\fn virtual QImage IAboutData::programLogo() const = 0

Returns a logo image for the product.
*/

/**
\fn virtual QString IAboutData::version() const = 0

Returns the version of the product.
*/

/**
\fn virtual QString IAboutData::shortDescription() const = 0

Returns a short plain-text description of the product.
*/

/**
\fn virtual QString IAboutData::homepage() const = 0

Returns the URL of the product.
*/

/**
\fn virtual QString IAboutData::bugAddress() const = 0

Returns the URL where bug reports for the product can be filed.
*/

/**
\fn virtual const QList<GCF::AboutPerson> IAboutData::authors() const = 0

Returns a list of authors associated with the product.
*/

/**
\fn virtual const QList<GCF::AboutPerson> IAboutData::credits() const = 0

Returns a list of persons to whom the credit of the product goes
*/

/**
\fn virtual QString IAboutData::license() const = 0

Returns the name of the license under-which the product is distributed.
*/

/**
\fn virtual QString IAboutData::copyrightStatement() const = 0

Returns the copyright statement for the product.
*/

/**
\ingroup stdinterfaces 
\interface IConfigurationDialogPageProvider IConfigurationDialogPageProvider
\brief Interface through which configuration dialog pages can be provided

GCF provides a built-in component called GCF::ConfigurationDialogComponent which provides
a dialog box called \ref CConfigurationDialog. The component and dialog box together 
look for implementations of IConfigurationDialogPageProvider interface in the entire application
and shows a configuration dialog like the one shown below

\image html configdialog.png

Pages to be shown in the configuration dialog box are queried from IConfigurationDialogPageProvider
implementations. When the user clicks Ok on the dialog box; the \ref savePage() method interface
method is called.

To use this interface in tandem with the \ref GCF::ConfigurationDialogComponent component, you
can use the code snippet below

\code
void MyClass::on_configDialogAction_triggered()
{
    GCF::ConfigurationDialogComponent component;
    component.initialize();
    // By the time the intialize() method returns the configuration 
    // dialog would have been shown and the user would have clicked
    // Ok or Cancel on the dialog box
}
\endcode
*/

/**
\fn virtual QString IConfigurationDialogPageProvider::pageTitle() const = 0

Returns the page-title to use while showing the page returned by this interface.
*/

/**
\fn virtual QIcon IConfigurationDialogPageProvider::pageIcon() const = 0

Returns the page-icon to use while showing the page returned by this interface.
*/

/**
\fn virtual QWidget* IConfigurationDialogPageProvider::createPage(QWidget* parent) = 0

Creates a configuration page and returns a pointer to it.
*/

/**
\fn virtual void IConfigurationDialogPageProvider::savePage(QWidget* page) = 0

When this function is called, the interface implementation is expected to save the changes
made on the page.
*/

/**
\ingroup stdinterfaces 
\interface IComponentRemoteAccessControl IComponentRemoteAccessControl
\brief This interface helps control access to a component's objects by remote
applications

Allowing remote access to applications brings to the table unique security challenges. 
For example, we might not be interested in allowing remote access originating from a 
certain category of systems, we may not be interested in allowing a subset of an object's 
methods/properties/signals/slots to be accessed remotely.

Towards this, you can implement any one or both of the following interfaces

\li IComponentRemoteAccessControl 
\li IObjectRemoteAccessControl

The IComponentRemoteAccessControl interface can be implemented by GCF::AbstractComponent subclasses 
to control access to objects contained in it by remote applications.

Example:

\code
class MyComponent : public GCF::AbstractComponent, virtual public IComponentRemoteAccessControl
{
    Q_OBJECT
    Q_INTERFACES(IComponentRemoteAccessControl)

    // ...

    bool isAllowComponentAccess(GCF::RemoteApp* remoteApp) const {

        // Only allow applications from my LAN to access this component
        if( remoteApp->socket()->peerAddress().toString().startsWith("192") )
            return true;

        return false;
    }

    bool isAllowObjectAccess(QObject* object, GCF::RemoteApp* remoteApp) const {

        // Since we have implemented isAllowComponentAccess(), remoteApp can be
        // assumed to be from the LAN
        if( !checkForSomeCondition() )
            return false;

        return true;
    }

    // ...
};
\endcode
*/

/**
\fn virtual bool IComponentRemoteAccessControl::isAllowComponentAccess(GCF::RemoteApp* remoteApp) const = 0

This function can be implemented to return true/false depending on whether you 
want your component's objects to be accessed by the remote application represented by
the \c remoteApp object.
*/

/**
\fn virtual bool IComponentRemoteAccessControl::isAllowObjectAccess(QObject* object, GCF::RemoteApp* remoteApp) const = 0

This function can be implemented to return true/false depending on whether you want 
the \c object owned by the component to be accessible to the remote application 
represented by \c remoteApp
*/


/**
\ingroup stdinterfaces 
\interface IObjectRemoteAccessControl IObjectRemoteAccessControl
\brief This interface helps control access to objects methods by remote applications.

Allowing remote access to applications brings to the table unique security challenges. 
For example, we might not be interested in allowing remote access originating from a 
certain category of systems, we may not be interested in allowing a subset of an object's 
methods/properties/signals/slots to be accessed remotely.

Towards this, you can implement any one or both of the following interfaces

\li IComponentRemoteAccessControl 
\li IObjectRemoteAccessControl

The IObjectRemoteAccessControl interface can be implemented by any exposed QObject
to help figure out what aspects of the object can be accessed remotely.

Example
\code
class MyObject : public QObject, virtual public IObjectRemoteAccessControl
{
    Q_OBJECT
    Q_INTERFACES(IObjectRemoteAccessControl)

    // ...

    Q_INVOKABLE void localInvocableMethodOnly();

    bool isAllowObjectAccess(GCF::RemoteApp* remoteApp) const
        { return true; }
    bool isAllowObjectMethodInvoke(int methodIdx, GCF::RemoteApp* remoteApp) const
    {
        QMetaMethod method = metaObject()->method(methodIdx);
        if( QString(method.signature()).startsWith("localInvocableMethodOnly") )
            return false;

        return true;
    }

    bool isAllowObjectSetProperty(int propIdx, GCF::RemoteApp* remoteApp) const
        { return true; }
    bool isAllowObjectGetProperty(int propIdx, GCF::RemoteApp* remoteApp) const
        { return true; }
    bool isAllowObjectSignalConnect(int signalIdx, GCF::RemoteApp* remoteApp) const
        { return true; }
    bool isAllowObjectSignalDelivery(int signalIdx, GCF::RemoteApp* remoteApp) const
        { return true; }

    // ...
};
\endcode
*/

/**
\fn virtual bool IObjectRemoteAccessControl::isAllowObjectAccess(GCF::RemoteApp* remoteApp) const = 0

An object can implement this interface method to return true/false depending on whether
\c remoteApp should have access to it or not.
*/

/**
\fn virtual bool IObjectRemoteAccessControl::isAllowObjectMethodInvoke(int methodIdx, GCF::RemoteApp* remoteApp) const = 0

An object can implement this interface method to return true/false depending on whether
\c remoteApp should have access to the method at \c methodIdx or not.
*/

/**
\fn virtual bool IObjectRemoteAccessControl::isAllowObjectSetProperty(int propIdx, GCF::RemoteApp* remoteApp) const = 0

An object can implement this interface method to return true/false depending on whether
\c remoteApp should have access to the property at \c propIdx or not.
*/

/**
\fn virtual bool IObjectRemoteAccessControl::isAllowObjectGetProperty(int propIdx, GCF::RemoteApp* remoteApp) const = 0


An object can implement this interface method to return true/false depending on whether
\c remoteApp should have access to the property at \c propIdx or not.
*/

/**
\fn virtual bool IObjectRemoteAccessControl::isAllowObjectSignalConnect(int signalIdx, GCF::RemoteApp* remoteApp) const = 0

An object can implement this interface method to return true/false depending on whether
\c remoteApp can access to the signal at \c signalIdx
*/

/**
\fn virtual bool IObjectRemoteAccessControl::isAllowObjectSignalDelivery(int signalIdx, GCF::RemoteApp* remoteApp) const = 0

An object can implement this interface method to return true/false depending on whether
\c remoteApp can have the signal at \c signalIdx delivered.
*/

/**
\ingroup stdinterfaces 
\interface IActiveXFactory IActiveXFactory
\brief Interface to serve ActiveX components from GCF::AbstractComponent

This interface can be implemented in your GCF::AbstractComponent subclass to allow finer
control over how your component's ActiveX components are created. There 
is really no need to implement this interface in order to use ActiveX components
in your GCF applications, a default implementation is provided by GCF. Implement
the interface only if you want finer control over creation and destruction of
ActiveX components

\note Only UI ActiveX components are supported at this moment.
*/

/**
\fn virtual QAxWidget* IActiveXFactory::createActiveXWidget(const QString& completeName, const QString& control) = 0

This function should be implemented to create an ActiveX widget given 

\li \c completeName of the node in the GUIXML that is requesting the control
\li \c control ID of the ActiveX control. This is usually a UUID like "{22D6F312-B0F6-11D0-94AB-0080C74C7E95}"
*/

/**
\fn virtual void IActiveXFactory::finalizeActiveXWidget(QAxWidget* widget, const QString& completeName, const QString& control) = 0

This method is called just before the ActiveX widget is deleted. Within this method, one can save 
certain state variables and uninitialize resources.

\note The ActiveX widget should not be deleted within this method.
*/

/**
\fn virtual void IActiveXFactory::destroyActiveXWidget(QAxWidget* widget, const QString& completeName, const QString& control) = 0

This method is called by GCF when it wants the ActiveX widget to be deleted. 
*/

/**
\ingroup stdinterfaces 
\interface IKPartsFactory IKPartsFactory
\brief Interface to serve KParts from GCF::AbstractComponent

This interface can be implemented in your GCF::AbstractComponent subclass to allow finer
control over how your component's KParts are created and destroyed. There 
is really no need to implement this interface in order to use KParts components
in your GCF applications, a default implementation is provided by GCF. Implement
the interface only if you want finer control over creation and destruction of
KParts components

*/

/**
\fn virtual KParts::Part* IKPartsFactory::createPart(const QString& completeName, PartCreationType type, const QString& typeStr, bool readOnly=true) = 0

This interface method must be implemented to create and return a part.

\param completeName Complete name of the GUI XML node that triggered this function call.
\param type Hints on how the \c typeStr parameter must be interpreted
\param typeStr A key based on which the part needs to be created
\param readOnly If set, a KParts::ReadOnlyPart must be created. Otherwise a KParts::ReadWritePart must be created

\code
enum PartCreationType
{
    UnknownType,
    MimeType,
    ServiceType,
    LibraryName
};
\endcode

If type is MimeType, typeStr is the mime type for which a part needs to be created
If type is ServiceType, typeStr is the service type for which a part needs to be created
If type is LibraryName, typeStr is the actual name of the library from which the part needs to be created

\note This method need not perform GUI merging, it will be done by GCF. KXMLGUIClient of the returned part will
be used by GCF to perform GUI Merging.

Example:
\code

KParts::Part* MyComponent::createPart(const QString& compName, PartCreationType type, const QString& typeStr, bool readOnly)
{
    if(type == IKPartsFactory::UnknownType || typeStr.isEmpty())
        return 0;

    KParts::Part* part = 0;
    QString errorString;

    switch(type)
    {
    case IKPartsFactory::MimeType:
        if(readOnly)
            part = KMimeTypeTrader::createPartInstanceFromQuery<KParts::ReadOnlyPart>
                    (typeStr, (QWidget*)0, comp, QString(), QVariantList(), &errorString);
        else
            part = KMimeTypeTrader::createPartInstanceFromQuery<KParts::ReadWritePart>
                    (typeStr, (QWidget*)0, comp, QString(), QVariantList(), &errorString);
        if(!part || !errorString.isEmpty())
            qDebug("%s", qPrintable(errorString));
        break;
    case IKPartsFactory::ServiceType:
        if(readOnly)
            part = KServiceTypeTrader::createInstanceFromQuery<KParts::ReadOnlyPart>
                    (typeStr, (QWidget*)0, comp, QString(), QVariantList(), &errorString);
        else
            part = KServiceTypeTrader::createInstanceFromQuery<KParts::ReadWritePart>
                    (typeStr, (QWidget*)0, comp, QString(), QVariantList(), &errorString);
        if(!part || !errorString.isEmpty())
            qDebug("%s", qPrintable(errorString));
        break;
    case IKPartsFactory::LibraryName:
        qDebug("Loading KParts from library is not supported yet");
    }

    return part;
}
\endcode
*/

/**
\fn virtual void IKPartsFactory::finalizePart(KParts::Part* part, const QString& completeName, PartCreationType type, const QString& typeStr, bool readOnly=true) = 0

This interface method is called just before the GUI of the part is un-merged from the GCF UI.

\param part Name of the part to destroy
\param completeName Name of the GUIXML node that caused the part to be created
\param type Hints on how the \c typeStr parameter must be interpreted
\param typeStr A key based on which the part was created
\param readOnly If set, a KParts::ReadOnlyPart was created. Otherwise a KParts::ReadWritePart was created

\note The part object should not be deleted by this method, it should be deleted in the destroy part.
*/

/**
\fn virtual void IKPartsFactory::destroyPart(KParts::Part* part, const QString& completeName, PartCreationType type, const QString& typeStr, bool readOnly=true) = 0

This interface method must be implemented to destroy parts. 

\param part Name of the part to destroy
\param completeName Name of the GUIXML node that caused the part to be created
\param type Hints on how the \c typeStr parameter must be interpreted
\param typeStr A key based on which the part was created
\param readOnly If set, a KParts::ReadOnlyPart was created. Otherwise a KParts::ReadWritePart was created

Before this method is called, the part's GUI is unmerged from the GCF GUI. 

\note The part object has to be deleted by this method. GCF wont delete it.
*/

/**
\ingroup stdinterfaces
\fn T icontainer_cast(IContainer *object)

The \c icontainer_cast casting operator can be used to cast from one \c IContainer interface to 
another. For example, consider the class and interface definitions below.

\code
class Interface1 : virtual public IContainer
{
public:
    virtual void interface1Method() = 0;
};
Q_DECLARE_INTERFACE(Interface1, "com.vcreatelogic.Interface1/1.0");

class Interface2 : virtual public IContainer
{
public:
    virtual void interface2Method() = 0;
};
Q_DECLARE_INTERFACE(Interface2, "com.vcreatelogic.Interface2/1.0");

class MyClass : public QObject, public Interface1, public Interface2
{
    Q_OBJECT
    Q_INTERFACES(Interface1 Interface2);

public:
    MyClass();
    ~MyClass();

    QObject* containerObject() { return this; }
    void interface1Method();
    void interface2Method();
};
\endcode

Now, suppose that you get a pointer to \c Interface1 and you want to find out if the 
object inside which \c Interface1 is contained; also implements \c Interface2 or not.
For this you can,

\code
Interface1* iface1Ptr = .....
Interface2* iface2Ptr = qobject_cast<Interface2*>(iface1Ptr->containerObject());
if(iface2Ptr)
	// do something...
\endcode

The same thing can now also be accomplished by making use of the \c icontainer_cast
casting operator.

\code
Interface1* iface1Ptr = .....
Interface2* iface2Ptr = icontainer_cast<Interface2*>(iface1Ptr);
if(iface2Ptr)
	// do something...
\endcode
*/
