/**
\page activex Embedding ActiveX Controls in GCF

GCF 1.6.4 introduced support for ActiveX in GCF. It is now possible to introduce an ActiveX 
component in your GCF applications without having to write a single line of code. Lets see 
how we can introduce the "Windows Media Player" ActiveX control on to the workspace.

Pick any GUIXML file and introduce a <activex> XML element. Simply specify the control's UUID, 
give it a name, title and parent widget.

\code
  <activex control="{22D6F312-B0F6-11D0-94AB-0080C74C7E95}"
           name="windowsMediaPlayer"
           title="Windows Media Player" 
           parentWidget="MainWindowComponent.workspace" />
\endcode

Save the XML file and restart the application. You will be able to see the "Media Player"
control in the workspace.

\image html ax1.png

You can do more than just embedding ActiveX controls in GCF applications, you can even configure them. 

\code
  <activex title="Windows Media Player" 
           control="{22D6F312-B0F6-11D0-94AB-0080C74C7E95}" 
           name="windowsMediaPlayer" 
           parentWidget="MainWindowComponent.workspace" />
    
  <method methodName="ComponentName.windowsMediaPlayer::Open"
          param1="C:/Entertainment/Albums/Akademy 2008 Belgium/MOV01005.MPG" />
  <method methodName="ComponentName.windowsMediaPlayer::Play" />

\endcode
  
The last two lines are as good as doing this in C++

\code
    windowsMediaPlayer->Open("C:/Entertainment/Albums/Akademy 2008 Belgium/MOV01005.MPG");
    windowsMediaPlayer->Play();
\endcode

Upon saving and restarting the application, you will now notice that the video is actually being played.

\image html ax2.png

You can do even more, assign a script name the the ActiveX control and you can script events thrown by 
it and also invoke methods from the script.

\code
  <activex title="Windows Media Player" 
           control="{22D6F312-B0F6-11D0-94AB-0080C74C7E95}" 
           name="windowsMediaPlayer" 
           parentWidget="MainWindowComponent.workspace" 
           scriptName="WindowsMediaPlayer"/>
\endcode
           
Save the GUIXML file and restart the program. 

\image html ax3.png

Notice how all the ActiveX events show up as scriptable events in the "Scriptable Objects" panel.

\section activex1 Customizing ActiveX creation and destruction

GCF provides an inbuilt mechanism for customizing ActiveX creation and destruction. 
If you want to customize the way ActiveX controls are created and destroyed then you 
can implement the IActiveXFactory interface in a component class. 

\code

class IActiveXFactory : virtual public IContainer
{
public:
    virtual QAxWidget* createActiveXWidget(const QString& completeName, 
                                           const QString& control) = 0;

    virtual void finalizeActiveXWidget(QAxWidget* widget, 
                                       const QString& completeName, 
                                       const QString& control) = 0;

    virtual void destroyActiveXWidget(QAxWidget* widget, 
                                      const QString& completeName, 
                                      const QString& control) = 0;
};

\endcode

If the above interface implementation is found in a component class whose GUIXML 
contains the <activex> xml elements, then GCF makes use of these methods to create, 
finalize and destroy ActiveX controls.

- The IActiveXFactory::createActiveXWidget() method is called for creating a control.
- The IActiveXFactory::finalizeActiveXWidget() method is called before the control is un-initialized
- The IActiveXFactory::destroyActiveXWidget() method is called after control is un-initialized. This 
method must delete the control.

*/

