/**
\page kparts Embedding KPart components in GCF

\note This feature is available only if you have KDE4 libraries available. It has been tested only on
GNU/Linux with KDE 4.1.

KParts is a component technology from the Free Software desktop environment KDE. Part in KDE is a
subclass of KParts::Part that provides
- A widget which shows the document viewed/edited by the part
- An action collection which provides QActions for accessing functionality in the part from
  the user interface.
- A XMLGUI document that describes how the part's UI can be merged into the part container,
  usually a KParts::MainWindow. 

Several applications in KDE provide their core functionality as a part. For example
- KHTMLPart – Provides the HTML rendering part used by the Konqueror web browser
- KateDocument – Provides the document part used by the Kate editor 

Since KParts and GCF are written in Qt, it would be of great value if we could use
KDE's components with Qt/GCF programs. Starting from GCF 1.6.4 this is possible. Note that KDE's
license allows use of its libraries in commercial applications. KDE offers a binary
compatibility guarantee similar to Qt's. KDE's disk space requirement of at least tens
of megabytes, however, makes use of KDE components most feasible on the Linux platform
where KDE is likely to be present or can be easily installed.

To use KParts components in your GCF applications, just make use of the <kpart> XML
element in a GUI XML file. You can load parts based on

 - mime-type OR
 - service-type OR
 - library name

For example: the “text/plain” mimetype is associated with the KatePart and the “text/html”
mimetype is associated with the KHTML part.

\section kparts1 Loading KParts

Add the following XML element in any of the GUIXML files.
\code
  <kpart mimeType="text/plain"
         parentWidget="MainWindowComponent.workspace"
         url="file:///home/prashanth/SampleApplication/Main/Main.cpp"
         name="katePart" title="Kate" readOnly="true" 
         before="MainWindowComponent.helpMenu" />
\endcode

Now save the XML file and restart the program, you should be able to see a KatePart embedded in the workspace 
of the main window. Note that we are loading a KPart associated with a mimeType.

\image html kparts1.png

We can notice the following
- The part's widget is parented into the workspace as specified by the parentWidget attribute.
- The part's UI is consolidated into a top-level menu whose "text" as specified by the title attribute
- The top-level UI is inserted before the menu as specified by the before attribute.
- The part opens the URL specified by the url attribute.

Lets load the "text/html" part now. We will need to add the following line to the GUIXML file.

\code
  <kpart mimeType="text/html"
         parentWidget="MainWindowComponent.rightDockArea"
         url="http://www.vcreatelogic.com"
         name="htmlPart" title="Browser" readOnly="true" 
         before="MainWindowComponent.helpMenu" />  
\endcode

After saving and restarting the application, you will notice that KDE's HTML browser component is loaded 
into the right dock area of the main window.

\image html kparts2.png

To load parts based on service-type, just use the serviceType attribute instead of the mimeType attribute 
in the kparts XML element. To load a part from a named library, use the libraryName attribute instead mimeType.

You can make use of method, connection and property GUIXML elements with parts as well, just as we can use 
them with ActiveX nodes. If you provide a scriptName attribute, then you can script parts as well.

\section kparts2 Customizing part creation and destruction

GCF provides an in-built mechanism to create and destroy parts. If you want to customize the way parts are 
created and destroyed; you can implement the IKPartsFactory interface in a component class.

\code
class IKPartsFactory : virtual public IContainer
{
public:
    enum PartCreationType
    {
        UnknownType,
        MimeType,
        ServiceType,
        LibraryName
    };

    virtual KParts::Part* createPart(const QString& completeName, 
                                     PartCreationType type, 
                                     const QString& typeStr, 
                                     bool readOnly=true) = 0;

    virtual void finalizePart(KParts::Part* part, 
                              const QString& completeName, 
                              PartCreationType type, 
                              const QString& typeStr, 
                              bool readOnly=true) = 0;

    virtual void destroyPart(KParts::Part* part, 
                             const QString& completeName, 
                             PartCreationType type, 
                             const QString& typeStr, 
                             bool readOnly=true) = 0;
};

\endcode

If the above interface implementation is found in a component class whose GUIXML contains the <kpart> 
xml elements, then GCF makes use of these methods to create, finalize and destroy parts.

- The createPart() method is called for creating a part.
- The finalizePart() method is called before the UI of the part is un-merged
- The destroyPart() method is called after the UI of the part is un-merged. This method must delete the part.

*/

