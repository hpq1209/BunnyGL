<?xml version="1.0" encoding="UTF-8"?>
<Material name="DirectionalLighting" number_of_properties="0" number_of_vertex_shaders="1" number_of_fragment_shaders="1">
<Shader scope="Vertex" name="DirectionLightVert" location="Inline" language="GLSL" entry="main">
varying vec4 diffuse,ambient;
varying vec3 normal,lightDir,halfVector;

void main()
{	
	normal = normalize(gl_NormalMatrix * gl_Normal);
	lightDir = normalize(vec3(gl_LightSource[0].position));

	halfVector = normalize(gl_LightSource[0].halfVector.xyz);
	
	diffuse = gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse;
	ambient = gl_FrontMaterial.ambient * gl_LightSource[0].ambient;
	ambient += gl_LightModel.ambient * gl_FrontMaterial.ambient;
			
	gl_Position = ftransform();
		
} 
</Shader>

<Shader scope ="Fragment" name="DirectionLightFrag" location ="Inline" language ="GLSL" entry ="main">
varying vec4 diffuse,ambient;
varying vec3 normal,lightDir,halfVector;

void main()
{
	vec3 n,halfV,viewV,ldir;
	float NdotL,NdotHV;
	vec4 color = ambient;
	
	n = normalize(normal);
	NdotL = max(dot(n,lightDir),0.0);

	if (NdotL > 0.0) {
		halfV = normalize(halfVector);
		NdotHV = max(dot(n,halfV),0.0);
		color += gl_FrontMaterial.specular * gl_LightSource[0].specular * pow(NdotHV,gl_FrontMaterial.shininess);
		color += diffuse * NdotL;
	}
	gl_FragColor = color;
}
</Shader>
</Material>


  