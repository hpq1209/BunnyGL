<?xml version="1.0" encoding="UTF-8"?>
<Material name="Hatch" number_of_properties="0" number_of_vertex_shaders="1" number_of_fragment_shaders="1">
<Shader scope="Vertex" name="HatchingVert" location="Inline" language="GLSL" entry="main">

<ApplicationUniform type="float" name="LightPosition" value="LightPosition" number_of_elements="3" defaultValue ="1.0,1.0,1.0"/>

uniform vec3  LightPosition;
varying vec3  ObjPos;
varying float V;
varying float LightIntensity;
 
void main()
{
    ObjPos          = (vec3(gl_Vertex ) + vec3(0.0, 0.0, 1.0)) * 0.5;
 
    vec3 pos        = vec3(gl_ModelViewMatrix * gl_Vertex);
    vec3 tnorm      = normalize(gl_NormalMatrix * gl_Normal);
    vec3 lightVec   = normalize(LightPosition - pos);

    LightIntensity  = max(dot(lightVec, tnorm), 0.0);

    V = gl_MultiTexCoord0.t;  // we can try .s for vertical stripes

    gl_Position = ftransform();
}

</Shader>

<Shader scope="Fragment" name="HatchingFrag" location="Inline" language="GLSL" entry="main">
<ApplicationUniform type="int" name="Noise" value="Noise" number_of_elements="1" defaultValue ="3"/>
<ApplicationUniform type="float" name="Swidth" value="Swidth" number_of_elements="1" defaultValue ="16.0"/>

const float frequency = 0.50;

varying vec3  ObjPos;               // object space coord (noisy)
varying float V;                    // generic varying
varying float LightIntensity;

uniform sampler3D Noise;            
uniform float Swidth;             

void main()
{
    //Obtaining Uniform Line Density 
    float dp       = length(vec2(dFdx(V * Swidth), dFdy(V * Swidth)));
    float logdp    = -log2(dp);
    float ilogdp   = floor(logdp);
    float stripes  = exp2(ilogdp);

    float noise    = texture3D(Noise, ObjPos).x;

	
	//Recall that V was a varying variable passed from the vertex shader. It was equal to the s
    //texture coordinate if we wanted to generate vertical stripes and equal to the t texture
    //coordinate if we wanted to generate horizontal stripes.

    float sawtooth = fract((V + noise * 0.1) * frequency * stripes);
	float triangle = abs(2.0 * sawtooth - 1.0);
	
    // adjust line width
    float transition = logdp - ilogdp;

    // taper ends
    triangle = abs((1.0 + transition) * triangle - transition);

    const float edgew = 0.2;            // width of smooth step

	
	// Simulating Lighting
    float edge0  = clamp(LightIntensity - edgew, 0.0, 1.0);
    float edge1  = clamp(LightIntensity, 0.0, 1.0);


    float square = 1.0 - smoothstep(edge0, edge1, triangle);

    gl_FragColor = vec4(vec3(square), 1.0);
}
</Shader>
</Material>

